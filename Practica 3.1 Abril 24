#include <stdio.h>
//Teorema del maestro: T(n) = a * T(n/b) + f(n)

//Para la busqueda binaria, segun el teorema del maestro: T(n) = T(n/2) + c
//En donde recae en el caso 2, 1 = 2^0, lo cual también se cumple. 
//Por lo tanto, según la fórmula del Teorema del Maestro, la complejidad del algoritmo 
//sería O(n^d * log n) = O(1 * log n) = O(log n)

int busquedaBinaria(int arr[], int izquierda, int derecha, int clave) {
    if (izquierda <= derecha) {
        int medio = izquierda + (derecha - izquierda) / 2;

        // Si la clave está en el medio, retornar su índice
        if (arr[medio] == clave) {
            return medio;
        }
        // Si la clave es menor que el elemento del medio,
        // buscar en la mitad izquierda del arreglo recursivamente
        else if (arr[medio] > clave) {
            return busquedaBinaria(arr, izquierda, medio - 1, clave);
        }
        // Si la clave es mayor que el elemento del medio,
        // buscar en la mitad derecha del arreglo recursivamente
        else {
            return busquedaBinaria(arr, medio + 1, derecha, clave);
        }
    }

    // La clave no fue encontrada, retornar -1
    return -1;
}

int main() {
    int arr[] = {2, 5, 8, 12, 18, 23, 28, 35, 42, 50};
    int n = sizeof(arr) / sizeof(arr[0]);
    int clave = 23;

    // Realizar la búsqueda binaria de la clave en el arreglo
    int indice = busquedaBinaria(arr, 0, n - 1, clave);

    if (indice != -1) {
        printf("La clave %d fue encontrada en el índice %d del arreglo.\n", clave, indice);
    } else {
        printf("La clave %d no fue encontrada en el arreglo.\n", clave);
    }

    return 0;
}
